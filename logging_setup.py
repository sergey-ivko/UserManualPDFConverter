# logging_setup.py
import logging
from datetime import datetime, timedelta
import os
import time
from typing import (
    Optional,
    Union,
    TextIO,	
    Callable,
    Any,
    TypeVar,
    Dict,
    List,
    cast
)
from functools import wraps

# –¢–∏–ø –¥–ª—è generic-—Ñ—É–Ω–∫—Ü–∏–π
F = TypeVar('F', bound=Callable[..., Any])

class TimedLogger:
    """–õ–æ–≥–≥–µ—Ä —Å –∑–∞–º–µ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π.
    
    Attributes:
        _logger (logging.Logger): –ë–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä.
        _start_times (Dict[str, float]): –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–π.
    """
    
    def __init__(
        self,
        name: str,
        log_dir: str = "logs",
        level: Union[int, str] = logging.INFO,
        console_output: bool = True,
        file_output: bool = True
    ) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TimedLogger.
        
        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞ (–æ–±—ã—á–Ω–æ __name__ –∏–ª–∏ –∏–º—è –∫–ª–∞—Å—Å–∞).
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "logs".
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é logging.INFO.
            console_output: –§–ª–∞–≥ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True.
            file_output: –§–ª–∞–≥ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True.
        """
        self._logger: logging.Logger = self._configure_logger(
            name, log_dir, level, console_output, file_output
        )
        self._start_times: Dict[str, float] = {}
    
    def get_log_path(self) -> str:
        """–ü—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ self.log_dir"""
        return os.path.abspath(self.log_dir)
    
    def _configure_logger(
        self,
        name: str,
        log_dir: str,
        level: Union[int, str],
        console_output: bool,
        file_output: bool
    ) -> logging.Logger:
        """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞.
        
        Args:
            name: –ò–º—è –ª–æ–≥–≥–µ—Ä–∞.
            log_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –ª–æ–≥–æ–≤.
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
            console_output: –í–∫–ª—é—á–∏—Ç—å –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å.
            file_output: –í–∫–ª—é—á–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª.
            
        Returns:
            –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä logging.Logger.
        """
        os.makedirs(log_dir, exist_ok=True)
        current_date: str = datetime.now().strftime("%Y-%m-%d")
        log_file: str = f"{log_dir}/{name}_{current_date}.log"

        logger: logging.Logger = logging.getLogger(name)
        logger.setLevel(level)
        
        if not logger.handlers:
            formatter: logging.Formatter = logging.Formatter(
                "%(asctime)s | %(levelname)-8s | %(message)s | [%(duration)s]"
            )
            
            handlers: List[logging.Handler] = []
            
            if file_output:
                file_handler: logging.FileHandler = logging.FileHandler(
                    log_file, 
                    encoding='utf-8'
                )
                file_handler.setFormatter(formatter)
                handlers.append(file_handler)
            
            if console_output:
                console_handler: logging.StreamHandler[TextIO] = logging.StreamHandler()
                console_handler.setFormatter(formatter)
                handlers.append(console_handler)
            
            for handler in handlers:
                logger.addHandler(handler)
        
        return logger
    
    def log_operation(self, message: str, level: str = "info") -> Callable[[F], F]:
        """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏.
        
        Args:
            message: –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.
            level: –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ('info', 'warning', 'error').
            
        Returns:
            –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏.
        """
        def decorator(func: F) -> F:
            @wraps(func)
            def wrapper(*args: Any, **kwargs: Any) -> Any:
                start_time: float = time.time()
                self._logger.info(
                    f"üöÄ –ù–∞—á–∞–ª–æ: {message}", 
                    extra={"duration": "N/A"}
                )
                
                try:
                    result: Any = func(*args, **kwargs)
                    duration: timedelta = timedelta(seconds=time.time() - start_time)
                    
                    log_method = getattr(self._logger, level)
                    log_method(
                        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {message}", 
                        extra={"duration": str(duration)}
                    )
                    return result
                except Exception as e:
                    duration = timedelta(seconds=time.time() - start_time)
                    self._logger.error(
                        f"‚ùå –û—à–∏–±–∫–∞: {message} ({str(e)})", 
                        extra={"duration": str(duration)},
                        exc_info=True
                    )
                    raise
            
            return cast(F, wrapper)
        return decorator
    
    def start_timer(self, operation_name: str) -> None:
        """–ù–∞—á–∞—Ç—å –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
        
        Args:
            operation_name: –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
            
        Raises:
            ValueError: –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –Ω–∞—á–∞—Ç–∞.
        """
        if operation_name in self._start_times:
            raise ValueError(f"–û–ø–µ—Ä–∞—Ü–∏—è '{operation_name}' —É–∂–µ –Ω–∞—á–∞—Ç–∞")
        self._start_times[operation_name] = time.time()
        self._logger.info(
            f"‚è≥ –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏: {operation_name}",
            extra={"duration": "N/A"}
        )
    
    def end_timer(self, operation_name: str) -> timedelta:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –∏ –∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        
        Args:
            operation_name: –ò–º—è –Ω–∞—á–∞—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏.
            
        Returns:
            –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏.
            
        Raises:
            KeyError: –ï—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞.
        """
        if operation_name not in self._start_times:
            raise KeyError(f"–û–ø–µ—Ä–∞—Ü–∏—è '{operation_name}' –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞")
        
        duration: timedelta = timedelta(seconds=time.time() - self._start_times[operation_name])
        self._logger.info(
            f"‚åõ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {operation_name}",
            extra={"duration": str(duration)}
        )
        del self._start_times[operation_name]
        return duration
    
    def info(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        self._logger.info(message, extra={"duration": "N/A"})
    
    def warning(self, message: str) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        self._logger.warning(message, extra={"duration": "N/A"})
    
    def error(self, message: str, exc_info: bool = True) -> None:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            exc_info: –í–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏. –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é True.
        """
        self._logger.error(
            message, 
            extra={"duration": "N/A"}, 
            exc_info=exc_info
        )